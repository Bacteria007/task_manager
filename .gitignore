# OSX
#
.DS_Store

# Xcode
#
build/
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata
*.xccheckout
*.moved-aside
DerivedData
*.hmap
*.ipa
*.xcuserstate
ios/.xcode.env.local

# Android/IntelliJ
#
build/
.idea
.gradle
local.properties
*.iml
*.hprof
.cxx/
*.keystore
!debug.keystore

# node.js
#
node_modules/
npm-debug.log
yarn-error.log

# fastlane
#
# It is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the
# screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/

**/fastlane/report.xml
**/fastlane/Preview.html
**/fastlane/screenshots
**/fastlane/test_output

# Bundle artifact
*.jsbundle

# Ruby / CocoaPods
/ios/Pods/
/vendor/bundle/

# Temporary files created by Metro to check the health of the file watcher
.metro-health-check*

# testing
/coverage



#   const axios=require('axios')

# class APIService {
#   static instance = null;

#   static getInstance() {
#     if (!APIService.instance) {
#       APIService.instance = new APIService();
#     }
#     return APIService.instance;
#   }

#   constructor() {
#     if (APIService.instance) {
#       throw new Error("Singleton class. Use getInstance() method to get the instance.");
#     }
#     this.client = axios.create({
#       baseURL: 'YOUR_API_BASE_URL',
#       timeout: 5000, // milliseconds
#     });
#   }async post(endpoint, data) {
#     try {
#       const response = await this.client.post(endpoint, data);
#       return this.handleResponse(response);
#     } catch (error) {
#       return this.handleError(error);
#     }
#   }

#   // Helper method to handle response
#   handleResponse(response) {
#     const { status, data } = response;
#     if (status === 200) {
#       return data;
#     } else {
#       throw new Error(`Request failed with status ${status}`);
#     }
#   }
# // Helper method to handle error
#   handleError(error) {
#     throw new Error(`Request failed: ${error.message}`);
#   }
# }

# export default APIService;
